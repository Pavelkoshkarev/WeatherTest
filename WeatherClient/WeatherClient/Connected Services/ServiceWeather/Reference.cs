//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeatherClient.ServiceWeather {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WcfWeather")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WeatherCityDay", Namespace="http://schemas.datacontract.org/2004/07/WcfWeather")]
    [System.SerializableAttribute()]
    public partial class WeatherCityDay : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConditionCommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float RainfallField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TemperatureMaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TemperatureMinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WindField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConditionComment {
            get {
                return this.ConditionCommentField;
            }
            set {
                if ((object.ReferenceEquals(this.ConditionCommentField, value) != true)) {
                    this.ConditionCommentField = value;
                    this.RaisePropertyChanged("ConditionComment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Day {
            get {
                return this.DayField;
            }
            set {
                if ((this.DayField.Equals(value) != true)) {
                    this.DayField = value;
                    this.RaisePropertyChanged("Day");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Rainfall {
            get {
                return this.RainfallField;
            }
            set {
                if ((this.RainfallField.Equals(value) != true)) {
                    this.RainfallField = value;
                    this.RaisePropertyChanged("Rainfall");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TemperatureMax {
            get {
                return this.TemperatureMaxField;
            }
            set {
                if ((this.TemperatureMaxField.Equals(value) != true)) {
                    this.TemperatureMaxField = value;
                    this.RaisePropertyChanged("TemperatureMax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TemperatureMin {
            get {
                return this.TemperatureMinField;
            }
            set {
                if ((this.TemperatureMinField.Equals(value) != true)) {
                    this.TemperatureMinField = value;
                    this.RaisePropertyChanged("TemperatureMin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Wind {
            get {
                return this.WindField;
            }
            set {
                if ((this.WindField.Equals(value) != true)) {
                    this.WindField = value;
                    this.RaisePropertyChanged("Wind");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceWeather.IServiceWeather")]
    public interface IServiceWeather {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWeather/GetData", ReplyAction="http://tempuri.org/IServiceWeather/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWeather/GetData", ReplyAction="http://tempuri.org/IServiceWeather/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWeather/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IServiceWeather/GetDataUsingDataContractResponse")]
        WeatherClient.ServiceWeather.CompositeType GetDataUsingDataContract(WeatherClient.ServiceWeather.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWeather/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IServiceWeather/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WeatherClient.ServiceWeather.CompositeType> GetDataUsingDataContractAsync(WeatherClient.ServiceWeather.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWeather/GetCities", ReplyAction="http://tempuri.org/IServiceWeather/GetCitiesResponse")]
        string[] GetCities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWeather/GetCities", ReplyAction="http://tempuri.org/IServiceWeather/GetCitiesResponse")]
        System.Threading.Tasks.Task<string[]> GetCitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWeather/GetWeatherForCityAndDay", ReplyAction="http://tempuri.org/IServiceWeather/GetWeatherForCityAndDayResponse")]
        WeatherClient.ServiceWeather.WeatherCityDay GetWeatherForCityAndDay(string city, System.DateTime day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWeather/GetWeatherForCityAndDay", ReplyAction="http://tempuri.org/IServiceWeather/GetWeatherForCityAndDayResponse")]
        System.Threading.Tasks.Task<WeatherClient.ServiceWeather.WeatherCityDay> GetWeatherForCityAndDayAsync(string city, System.DateTime day);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceWeatherChannel : WeatherClient.ServiceWeather.IServiceWeather, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceWeatherClient : System.ServiceModel.ClientBase<WeatherClient.ServiceWeather.IServiceWeather>, WeatherClient.ServiceWeather.IServiceWeather {
        
        public ServiceWeatherClient() {
        }
        
        public ServiceWeatherClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceWeatherClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceWeatherClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceWeatherClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public WeatherClient.ServiceWeather.CompositeType GetDataUsingDataContract(WeatherClient.ServiceWeather.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WeatherClient.ServiceWeather.CompositeType> GetDataUsingDataContractAsync(WeatherClient.ServiceWeather.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public string[] GetCities() {
            return base.Channel.GetCities();
        }
        
        public System.Threading.Tasks.Task<string[]> GetCitiesAsync() {
            return base.Channel.GetCitiesAsync();
        }
        
        public WeatherClient.ServiceWeather.WeatherCityDay GetWeatherForCityAndDay(string city, System.DateTime day) {
            return base.Channel.GetWeatherForCityAndDay(city, day);
        }
        
        public System.Threading.Tasks.Task<WeatherClient.ServiceWeather.WeatherCityDay> GetWeatherForCityAndDayAsync(string city, System.DateTime day) {
            return base.Channel.GetWeatherForCityAndDayAsync(city, day);
        }
    }
}
